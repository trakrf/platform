# Backend Task Runner (TrakRF Platform)
# Uses fallback to inherit shared recipes from root justfile
set fallback := true

# List all available recipes
default:
    @just --list

# Start Go development server (local mode: backend on host → postgres in docker)
dev:
    @echo "🚀 Backend on host → postgres in docker (localhost:5432)"
    @if [ -z "$$PG_URL_LOCAL" ]; then \
        echo "⚠️  PG_URL_LOCAL not set - using PG_URL"; \
        go run .; \
    else \
        PG_URL="$$PG_URL_LOCAL" go run .; \
    fi

# Cloud development (backend on host → postgres in cloud)
dev-cloud:
    @echo "☁️  Backend on host → cloud postgres"
    @if [ -z "$$PG_URL_CLOUD" ]; then \
        echo "❌ PG_URL_CLOUD not set in .env.local"; \
        exit 1; \
    fi
    PG_URL="$$PG_URL_CLOUD" go run .

# Alias for consistency
run: dev

# Lint Go code (formatting + static analysis)
lint:
    go fmt ./...
    go vet ./...

# Run backend tests with verbose output
test:
    go test -v ./...

# Run specific test package via Docker
# Usage: just test-docker ./internal/handlers/assets
# Usage: just test-docker ./internal/storage
# Usage: just test-docker ./... (all tests)
test-docker path:
    docker compose exec backend go test -v {{path}}

# Run specific test function via Docker (use -run flag)
# Usage: just test-docker-run ./internal/handlers/assets TestCreateAsset_RealDB
# Usage: just test-docker-run ./internal/handlers/assets "TestCreate.*"
test-docker-run path pattern:
    docker compose exec backend go test -v {{path}} -run {{pattern}}

# Run tests with race detection
test-race:
    go test -race ./...

# Run tests with coverage report
test-coverage:
    go test -cover ./...

# Build backend binary with version injection
build:
    go build -ldflags "-X main.version=0.1.0-dev" -o bin/trakrf .

# Generate Swagger API documentation
swagger:
    @echo "📚 Generating Swagger documentation..."
    swag init -g main.go --parseDependency --parseInternal
    @echo "✅ Swagger docs generated at docs/"
    @echo "📖 View at: http://localhost:8080/swagger/index.html"

# Smoke test - verifies binary starts without panic (uses PG_URL_LOCAL for host → docker)
smoke-test:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "🔥 Running smoke test..."
    just build
    echo "Starting server with 5s timeout..."
    if [ -n "${PG_URL_LOCAL:-}" ]; then
    export PG_URL="$PG_URL_LOCAL"
    fi
    timeout 5s ./bin/trakrf > /tmp/trakrf-smoke.log 2>&1 & SERVER_PID=$!
    sleep 2
    echo "Testing /healthz endpoint..."
    if curl -f http://localhost:8080/healthz > /dev/null 2>&1; then
    echo "✅ Smoke test passed"
    kill $SERVER_PID 2>/dev/null || true
    else
    echo "❌ Smoke test failed"
    cat /tmp/trakrf-smoke.log
    kill $SERVER_PID 2>/dev/null || true
    exit 1
    fi

# Run all backend validation checks
validate: lint test build smoke-test

# Shell access
shell:
    docker compose exec backend sh

# ============================================================================
# Database Migrations
# ============================================================================

# Run database migrations
migrate:
    @echo "🔄 Running database migrations..."
    docker compose exec backend sh -c 'migrate -path /app/database/migrations -database "$PG_URL" up'
    @echo "✅ Migrations complete"

# Alias for consistency
migrate-up: migrate

# Roll back last migration
migrate-down:
    @echo "⏪ Rolling back last migration..."
    docker compose exec backend sh -c 'migrate -path /app/database/migrations -database "$PG_URL" down 1'
    @echo "✅ Rollback complete"

# Show current migration version
migrate-status:
    @echo "📊 Migration status:"
    docker compose exec backend sh -c 'migrate -path /app/database/migrations -database "$PG_URL" version'

# Create new migration file
migrate-create name:
    @echo "📝 Creating new migration: {{name}}"
    docker compose exec backend sh -c 'migrate create -ext sql -dir /app/database/migrations -seq {{name}}'

# Force migration to specific version (dangerous)
migrate-force version:
    @echo "⚠️  Forcing migration version to {{version}}"
    docker compose exec backend sh -c 'migrate -path /app/database/migrations -database "$PG_URL" force {{version}}'

# Roll back N migrations
migrate-rollback steps="1":
    @echo "⏪ Rolling back {{steps}} migration(s)..."
    docker compose exec backend sh -c 'migrate -path /app/database/migrations -database "$PG_URL" down {{steps}}'
    @echo "✅ Rollback complete"

# Redo last migration (down + up)
migrate-redo:
    @echo "🔄 Redoing last migration..."
    @just migrate-rollback 1
    @just migrate

# Reset all migrations (down all + up)
migrate-reset:
    @echo "⚠️  Resetting all migrations..."
    docker compose exec backend sh -c 'migrate -path /app/database/migrations -database "$PG_URL" down -all || true'
    @just migrate

# ============================================================================
# Database Management (Rails-like commands)
# ============================================================================

# Create database (for test environments)
db-create dbname="trakrf_test":
    @echo "📦 Creating database: {{dbname}}"
    docker compose exec timescaledb psql -U postgres -c "CREATE DATABASE {{dbname}};" || echo "Database {{dbname}} may already exist"

# Drop database
db-drop dbname="trakrf_test":
    @echo "🗑️  Dropping database: {{dbname}}"
    docker compose exec timescaledb psql -U postgres -c "DROP DATABASE IF EXISTS {{dbname}} WITH (FORCE);"

# Full reset: drop, create, migrate, seed
db-reset: (db-drop "trakrf_test") (db-create "trakrf_test")
    @echo "✅ Database reset complete"

# Seed database with development data
seed:
    @echo "🌱 Seeding database..."
    docker compose exec backend sh -c 'psql "$PG_URL" -f /app/database/seeds/development.sql'
    @echo "✅ Seeding complete"

# Setup test database: create + migrate
db-test-setup: (db-create "trakrf_test")
    @echo "🧪 Setting up test database..."
    docker compose exec backend sh -c 'migrate -path /app/database/migrations -database "postgresql://postgres:postgres@timescaledb:5432/trakrf_test?sslmode=disable" up'
    @echo "✅ Test database ready"

# Teardown test database
db-test-teardown:
    @just db-drop "trakrf_test"
